// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

enum UserType {
  USER
  AGENT
  ADMIN
}

model Auth {
  userId   String @id
  user     User   @relation(fields: [userId], references: [id])
  password String
}

model User {
  id         String    @id @default(cuid())
  auth       Auth?
  name       String?
  email      String    @unique
  type       UserType
  likedHomes Home[]
  /// @onDelete(CASCADE)
  showings   Showing[]

  /// @onDelete(CASCADE)
  agentProfile Agent?
}

model Agent {
  id       String    @id @default(cuid())
  name     String
  phone    String
  email    String    @unique
  agency   Agency    @relation(fields: [agencyId], references: [id])
  agencyId String
  /// @onDelete(SET_NULL)
  homes    Home[]
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  /// @onDelete(CASCADE)
  showings Showing[]
}

model Agency {
  id      String  @id @default(cuid())
  name    String  @unique
  phone   String  @unique
  address String  @unique
  agents  Agent[]
}

model Home {
  mlsn        String    @id
  agent       Agent     @relation(fields: [agentId], references: [id])
  agentId     String
  price       Int
  sqfootage   Int
  street      String
  city        String
  state       String
  zipcode     Int
  subdivision String?
  /// @onDelete(SET_NULL)
  schools     School[]
  dailyHits   Int       @default(0)
  alarmInfo   String
  description String
  bedrooms    Int
  bathrooms   Float
  liked       User[]
  /// @onDelete(CASCADE)
  showings    Showing[]
  /// @onDelete(CASCADE)
  files       File[]
}

enum SchoolType {
  ELEMENTARY
  MIDDLE
  HIGH
}

model School {
  name  String     @id
  type  SchoolType
  homes Home[]     @relation
}

model Showing {
  id        String    @id @default(cuid())
  confirmed Boolean?
  date      DateTime
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  agent     Agent     @relation(fields: [agentId], references: [id])
  agentId   String
  home      Home      @relation(fields: [homeMlsn], references: [mlsn])
  homeMlsn  String
  /// @onDelete(CASCADE)
  feedback  Feedback?
}

enum FeedbackOptions {
  VERY_GOOD
  GOOD
  NEUTRAL
  POOR
  VERY_POOR
}

model Feedback {
  id           String          @id @default(cuid())
  showing      Showing         @relation(fields: [showingId], references: [id])
  showingId    String
  isInterested Boolean
  experience   FeedbackOptions
  priceOpinion FeedbackOptions
  notes        String?
}

enum FileType {
  IMAGE
  DOCUMENT
}

model File {
  id       String   @id @default(cuid())
  name     String
  mime     String
  contents String
  type     FileType
  home     Home     @relation(fields: [homeMlsn], references: [mlsn])
  homeMlsn String
}
